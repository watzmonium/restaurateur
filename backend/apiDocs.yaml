openapi: 3.0.3
servers:
  - description: server docs for restaurateur app
    url: http://localhost:3000
info:
  title: Restaurateur API
  version: 1.0.0
  description: API documentation for restaurateur
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []

paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: securepassword123
              required:
                - email
                - password
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Email and password are required to register

  /users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: securepassword123
              required:
                - email
                - password
      responses:
        "200":
          description: User logged in successfully
        "400":
          description: Email and password are required to log in

  /users/{userId}/restaurants:
    get:
      summary: Get restaurants for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user whose restaurants are being retrieved
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of the user's restaurants with reviews
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: User not found or no reviews available
  /restaurants:
    get:
      summary: Get all unique restaurants
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of all restaurants
        "404":
          description: No restaurants found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Add a new restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                googleId:
                  type: string
                  example: "12345"
                name:
                  type: string
                  example: "Test Restaurant"
                rating:
                  type: integer
                  example: 4
      responses:
        "201":
          description: Restaurant created and associated with the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the newly created restaurant
                    example: 123
        "400":
          description: Bad request (missing restaurant ID, name, or rating)
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          description: Server error (failed to insert data)

  /restaurants/search:
    get:
      summary: Search for restaurants based on text query
      description: |
        This route accepts a text query and searches for restaurants using the Google Places API. 
        The route requires JWT authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: The text query for the restaurant search, e.g., "restaurants in Sydney".
      responses:
        "200":
          description: A list of restaurants matching the query
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurants:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Name of the restaurant
                        address:
                          type: string
                          description: Formatted address of the restaurant
                        rating:
                          type: number
                          description: The restaurant's average rating
                          example: 4
                        userRatingsTotal:
                          type: integer
                          description: Number of user ratings
                          example: 200
                        placeId:
                          type: string
                          description: Google Places ID for the restaurant
                          example: "ChIJN1t_tDeuEmsRUsoyG83frY4"
        "400":
          description: Invalid query parameter
        "401":
          description: Unauthorized - JWT token missing or invalid
        "500":
          description: Error occurred while fetching data from Google Places API

  /restaurants/{restaurantId}:
    get:
      summary: Get details of a specific restaurant, including reviews
      security:
        - bearerAuth: []
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Restaurant data with reviews
        "404":
          description: Restaurant not found
    patch:
      summary: Update a restaurant's name and rating
      security:
        - bearerAuth: []
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Restaurant"
                rating:
                  type: integer
                  example: 4
      responses:
        "200":
          description: Restaurant updated successfully
        "400":
          description: Bad request, name or rating missing
        "404":
          description: Restaurant not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete a restaurant (requires ownership check)
      security:
        - bearerAuth: []
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Restaurant deleted successfully
        "403":
          description: Permission denied, cannot delete restaurant
        "404":
          description: Restaurant not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /reviews:
    post:
      summary: Create a new review (JWT required)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantId:
                  type: integer
                  example: 1
                dishName:
                  type: string
                  example: "Pasta"
                rating:
                  type: integer
                  example: 4
                review:
                  type: string
                  example: "Delicious pasta!"
              required:
                - restaurantId
                - dishName
                - rating
                - review
      responses:
        "201":
          description: Review created successfully
        "400":
          description: Invalid request data
        "403":
          description: User is not authorized to create a review for this restaurant
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /reviews/{reviewId}:
    get:
      summary: Get a specific review by ID (JWT required)
      security:
        - bearerAuth: []
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Review data
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  restaurant_id:
                    type: integer
                  dish_name:
                    type: string
                  rating:
                    type: number
                  review:
                    type: string
        "403":
          description: User is not authorized to access this review
        "404":
          description: Review not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    patch:
      summary: Update a review (JWT required)
      security:
        - bearerAuth: []
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dishName:
                  type: string
                  example: "Updated dish"
                rating:
                  type: integer
                  example: 4
                review:
                  type: string
                  example: "Updated review text"
              required:
                - dishName
                - rating
                - review
      responses:
        "200":
          description: Review updated successfully
        "400":
          description: Invalid request data
        "403":
          description: User is not authorized to update this review
        "404":
          description: Review not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    delete:
      summary: Delete a review by ID (JWT required)
      security:
        - bearerAuth: []
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Review deleted successfully
        "403":
          description: User is not authorized to delete this review
        "404":
          description: Review not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
